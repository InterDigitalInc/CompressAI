stages:
  - build
  - static-analysis
  - test
  - doc

.default-before-script: &default-before-script
  - python --version

.check-torch-cuda: &check-torch-cuda
  - |
    TORCH_VERSION="$TORCH_VERSION" python <<EOF
    import os, torch
    from packaging import version
    print(f"{torch.__version__=}\n{torch.version.cuda=}\n{torch.cuda.is_available()=}")
    expected_torch_version = os.environ["TORCH_VERSION"]
    assert (
        version.parse(torch.__version__).base_version
        == version.parse(expected_torch_version).base_version
    ), f"Expected torch.__version__={expected_torch_version}, but got {torch.__version__=}"
    # assert torch.cuda.is_available(), "CUDA is not available"
    EOF

wheel:
  image: python:$PYTHON_VERSION-buster
  stage: build
  before_script:
    - *default-before-script
    - python -m pip install build
  script:
    - python -m build --wheel .
  artifacts:
    paths:
      - dist/
    expire_in: 1 day
  parallel:
    matrix:
      - PYTHON_VERSION: ['3.8', '3.9', '3.10']
  tags:
    - docker

sdist:
  image: python:3.10-buster
  stage: build
  before_script:
    - *default-before-script
    - python -m pip install build
  script:
    - python -m build --sdist .
  tags:
    - docker

flake8:
  stage: static-analysis
  image: pytorch/pytorch:2.2.0-cuda11.8-cudnn8-devel
  before_script:
    - *default-before-script
    - python -m pip install flake8 flake8-bugbear flake8-comprehensions
  script:
    - make check-flake8
  tags:
    - docker

ruff-format:
  stage: static-analysis
  image: python:3.10-buster
  before_script:
    - *default-before-script
    - python -m pip install tomli
    - RUFF_VERSION=$(python -c 'import tomli; config = tomli.load(open("uv.lock", "rb")); ruff_config = next(x for x in config["package"] if x["name"] == "ruff"); print(ruff_config["version"])')
    - python -m pip install "ruff==$RUFF_VERSION"
  script:
    - make check-ruff-format
  tags:
    - docker

ruff-organize-imports:
  stage: static-analysis
  image: python:3.10-buster
  before_script:
    - *default-before-script
    - python -m pip install tomli
    - RUFF_VERSION=$(python -c 'import tomli; config = tomli.load(open("uv.lock", "rb")); ruff_config = next(x for x in config["package"] if x["name"] == "ruff"); print(ruff_config["version"])')
    - python -m pip install "ruff==$RUFF_VERSION"
  script:
    - make check-ruff-organize-imports
  tags:
    - docker

test:
  stage: test
  image: pytorch/pytorch:$PYTORCH_IMAGE
  before_script:
    - *default-before-script
    - |
      if [ "$PYTORCH_IMAGE" == "1.13.1-cuda11.6-cudnn8-devel" ]; then
        CUDA_VERSION_NAME=cu116
        TORCH_VERSION=1.13.1+cu116
        TORCHVISION_VERSION=0.14.1+cu116
      elif [ "$PYTORCH_IMAGE" == "2.2.0-cuda11.8-cudnn8-devel" ]; then
        CUDA_VERSION_NAME=cu118
        TORCH_VERSION=2.2.0+cu118
        TORCHVISION_VERSION=0.17.0+cu118
      fi
    - python -m pip install -U pip
    - python -m pip install -e .
    - python -m pip install pytest pytest-cov plotly
    - *check-torch-cuda
    - |
      PYTEST_ARGS=(--cov=compressai --capture=no tests)
      if [ "$CI_COMMIT_BRANCH" != "master" ]; then
        PYTEST_ARGS+=(-m "not pretrained")
      fi
  script:
    - pytest "${PYTEST_ARGS[@]}"
  parallel:
    matrix:
      - PYTORCH_IMAGE:
          - "1.13.1-cuda11.6-cudnn8-devel"
          - "2.2.0-cuda11.8-cudnn8-devel"
  tags:
    - docker

doc:
  stage: doc
  image: pytorch/pytorch:2.2.0-cuda11.8-cudnn8-devel
  before_script:
    - *default-before-script
    - python -m pip install -e .
    - cd docs
    - python -m pip install -r requirements.txt
  script:
    - make html
  tags:
    - docker
